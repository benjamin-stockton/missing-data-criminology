---
title: "Sentencing Analysis with Pattern Mixture Modeling"
author: 
    - name: C. Clare Strange
      email: cs3846@drexel.edu
      affiliations:
          - name: Department of Criminology and Justice Studies, Drexel University
    - name: Benjamin Stockton
      email: benjamin.stockton@uconn.edu
      orcid: 0000-0002-3820-5293
      affiliations: 
          - name: Department of Statistics, University of Connecticut
    - name: Ofer Harel
      affiliations: 
          - name: Department of Statistics, University of Connecticut
date: today
number-sections: true 
number-depth: 2
toc: false
format:
  pdf:
    keep-tex: true
execute: 
  cache: true
  echo: false
  warning: false
bibliography: ../Literature/Criminology.bib
fig-height: 5
fig-width: 8
abstract: ""
keywords: incomplete data, pattern-mixture model
editor: visual
---

```{r}
#| label: set-up
library(dplyr, warn.conflicts = FALSE, quietly = TRUE)
library(ggplot2, warn.conflicts = FALSE, quietly = TRUE)
library(mice, warn.conflicts = FALSE, quietly = TRUE)
library(broom.mixed)
library(brms)
library(VIM)
library(bayesplot)

theme_set(theme_bw())
color_scheme_set("brightblue")
```

## Methods

## Analysis

```{r}
#| label: load-data
df <- readr::read_csv("../Data/PCS-most-serious-sentence-2010-2019-pmm.csv",
                      show_col_types = FALSE)

df <- df |> mutate(
        YEAR = as.factor(YEAR),
        INCAR = case_when(
            JP_MIN == 0 ~ 0,
            JP_MIN > 0 ~ 1,
            TRUE ~ NA
        ),
        SEX = case_when(
            MALE == 1 ~ "Male",
            MALE == 0 ~ "Female",
            TRUE ~ NA
        ),
        OFF_RACE = case_when(
            OFF_RACER == 1 ~ "WHITE",
            OFF_RACER == 2 ~ "BLACK",
            OFF_RACER == 3 ~ "LATINO",
            OFF_RACER == 4 ~ "OTHER",
            TRUE ~ NA
        ),
        PRVREC = case_when(
            PRSR == 0 ~ "0",
            PRSR == 1 ~ "1/2/3",
            PRSR == 2 ~ "4/5",
            PRSR == 3 ~ "REVOC/RFEL",
            TRUE ~ NA
        ),
        CRIME = case_when(
            CRIMETYPE == 1 ~ "Persons",
            CRIMETYPE == 2 ~ "Property",
            CRIMETYPE == 3 ~ "Drug",
            CRIMETYPE == 4 ~ "DUI",
            CRIMETYPE == 5 ~ "Other",
            TRUE ~ NA
        )
    ) |>
    select(
        -c(OFF_RACER, PRSR, MALE, CRIMETYPE)
    )

df$OFF_RACE <- factor(df$OFF_RACE, levels = c("WHITE", "BLACK", "LATINO", "OTHER"))
```

```{r}
md.pattern(df, rotate.names = TRUE)
```

```{r}
df |>
    filter(JP_MIN_MON > 0) |>
    group_by(YEAR) |>
    summarize(
        mean_JP_MIN_MON = mean(JP_MIN_MON, na.rm = TRUE),
        sd_JP_MIN_MON = sd(JP_MIN_MON, na.rm = TRUE),
        min_JP_MIN_MON = min(JP_MIN_MON, na.rm = TRUE),
        median_JP_MIN_MON = median(JP_MIN_MON, na.rm = TRUE),
        max_JP_MIN_MON = max(JP_MIN_MON, na.rm = TRUE),
        p_INCAR = mean(INCAR, na.rm = TRUE)
    )

df |>
    filter(JP_MIN_MON > 0) |>
    ggplot(aes(JP_MIN_MON)) +
        geom_density() +
        facet_wrap(YEAR~., scales = "free_y")
df |>
    filter(JP_MIN_MON > 0) |>
    ggplot(aes(as.factor(YEAR), JP_MIN_MON)) +
        geom_violin(draw_quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975)) +
        geom_point(size = 0.5)
```

```{r}
ggplot(df, aes(CRIME, JP_MIN_MON)) +
    geom_violin(draw_quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975)) +
    geom_point(size = 0.5)
```

```{r}
ggplot(df, aes(OFF_RACE, JP_MIN_MON)) +
    geom_violin(draw_quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975)) +
    geom_point(size = 0.5)
```

```{r}
ggplot(df, aes(INCAR, fill = CRIME)) +
    geom_bar(position = "dodge")
```

```{r}
#| label: check-lognormal-sent
sent_non0 <- df$JP_MIN_MON[which(df$INCAR == 1)]
s <- sample(length(sent_non0), size = 10000, replace = FALSE)

qqnorm(sent_non0[s])
qqline(sent_non0[s])

qqnorm(log(sent_non0[s]))
qqline(log(sent_non0[s]))
```

```{r}
fluxplot(df)
```

```{r}
df |> 
    select(
        JP_MIN_MON, OFF_RACE, DOSAGE, RECMIN, PRVREC, CRIME, TRIAL, SEX
    ) |> 
    aggr(sortby = "JP_MIN_MON", plot = FALSE) |>
    plot(numbers = TRUE, prop = FALSE)
```

I'll prepare the data for analysis next. First, I'll center and scale the numeric predictors which are Offense Gravity Score (OGS), defendant age, and the square of each. Then I'll use MICE to multiply impute the incomplete variables with predictive mean matching. For now I'll use $M = 10$ since less than 5% of all observations are missing (mainly in defendant race).

```{r}
#| label: mice
df[s,c("OGS", "OGSQ", "DOSAGE", "DOSAGEQ")] <- scale(df[s,c("OGS", "OGSQ", "DOSAGE", "DOSAGEQ")], center = TRUE, scale = TRUE)

imps0 <- mice(df[s,], m = 1, method = "pmm", maxit = 0)

mthd <- imps0$method
mthd["JP_MIN_MON"] <-  "~I(JP_MIN / 30)"
# mthd[c("RECMIN", "INCAR", "OFF_RACE", "PRVREC")] <- "cart"
mthd

pred_mat <- imps0$predictorMatrix
pred_mat[,"JPR_ID"] <- 0
pred_mat

imps <- mice(df[s,], m = 10, method = mthd, predictorMatrix = pred_mat, maxit = 10)

plot(imps)
```

### Logistic Regression on Incarceration

I'll fit a logistic regression like before as a sanity check. The estimated odds ratio for increased odds of incarceration for a Black defendant over a White defendant should be roughly 1.25 as we saw in the complete case analysis in the previous paper.

```{r}
#| label: mice-glm
fit_incar <- with(imps, glm(INCAR ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                      OGS * PRVREC + PRVREC + RECMIN + CRIME + TRIAL +
                     as.factor(YEAR) + as.factor(COUNTY),
                 family = binomial(link = "logit"),
                 x = FALSE, y = FALSE,
                 model = FALSE))
```

```{r}
#| label: tbl-glm-summary
smry <- summary(pool(fit_incar))

smry |>
    filter(stringr::str_sub(term, 1,3) != "as.") |>
    mutate(
        lb95 = estimate - qt(0.975, df = df) * std.error,
        ub95 = estimate + qt(0.975, df = df) * std.error
    ) |>
    select(term, estimate, std.error, lb95, ub95)
```

From the logistic regression fit with MI and $M = 10$ imputations done using predictive mean matching, we found that a Black defendant is `r round(exp(0.2225), 2)` (95% CI of (`r round(exp(0.2225 - 1.96 * 0.0064), 3)`, `r round(exp(0.2225 + 1.96 * 0.0064), 3)`)times more likely to be sentenced to incarceration than an otherwise similar White defendant.

We re-analyze the data using a generalized linear mixed model and again taking the binary incarceration decision as the outcome and random effects for the Year and County with random slopes for the most serious Crime type by County.

```{r}
#| label: mice-glmm
fit_incar_mm <- with(imps, lme4::glmer(INCAR ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                     PRVREC + OGS * PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 | COUNTY),
                 family = binomial(link = "logit"),
                 verbose = 0))

# c_dat <- complete(imps, "all")
# fit_list <- parallel::mclapply(c_dat, 
#                                mc.cores = 10,
#                                function(d1) {
#                  
#                  fit <- lme4::glmer(INCAR ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
#                              PRVREC + RECMIN + CRIME + TRIAL +
#                              (1 | YEAR) + (1 + CRIME | COUNTY),
#                              data = d1,
#                              family = binomial(link = "logit"),
#                              verbose = 0)
#                  return(fit)
#               })
# 
# fit_incar_mm <- as.mira(fit_list)
```

```{r}
#| label: glmm-sum

smry <- summary(pool(fit_incar_mm))
smry |>
    mutate(
        se = std.error,
        lb95 = estimate - qt(0.975, df = df) * se,
        ub95 = estimate + qt(0.975, df = df) * se,
        sig = case_when(
            lb95 > 0 ~ "*",
            ub95 < 0 ~ "*",
            TRUE ~ ""
        )
    ) |>
    select(
        term, estimate, se, lb95, ub95, sig
    )
```

### Hurdle Models

A hurdle model models data with a high number of zeros (compared to standard distributions). The model places a probability point mass $P(Y = 0) = \theta$ at $Y = 0$ and uses a truncated (at zero) probability distribution for the non-zero sample space $P(Y \neq 0) = p_{y \neq 0}(y)$. This differs from a zero-inflated model which is a mixture of two distributions (includes the non-zero distribution's zero probability) as the hurdle model truncates the non-zero distribution.

I'll create a GLM with brms and the log normal hurdle distribution.

The model is composed of two components: the hurdle for the zeros and the GLM for the non-zero part. Let $\pi_i$ be the probability that the $i$th observation is zero and $P(Y_i \neq 0) = f_{y\neq 0}(y-i)$ where $f_{y\neq 0}$ is a truncated probability mass/density function.

#### Lognormal Hurdle GLM with Intercept-only Hurdle

Under this first model, we will model the probability of $Y_i = 0$ as constant across the observations using an intercept-only model; the default for `brms` [@b√ºrkner2017].

$$
\mathrm{logit}^{-1}(P(Y_i = 0)) = \pi_0
$$ {#eq-hurdle-intercept}

$$
log(Y_i) = \mathbf{x}_i \boldsymbol{\beta} + \mathbf{z}_i \mathbf{u} + \epsilon_i
$$ {#eq-hurdle-glm} where $\mathbf{u}$ is MVN with $E(\mathbf{U}) = 0$ and covariance matrix $Cov(\mathbf{U}) = G$, $\epsilon_i \overset{iid}{\sim} N(0, \sigma^2)$ and $\mathbf{u}$ and $\boldsymbol{\epsilon}$ are mutually independent. $\mathbf{x}_i$ and $\mathbf{z}_i$ are rows from two known design matrices for the population-level and group-level effects respectively.

The model is specified as usual for a GLMM:

```         
brm(JP_MIN_MON ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                     PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 + CRIME |COUNTY),
               data = data,
               family = hurdle_lognormal(link = "identity",
                           link_sigma = "log",
                           link_hu = "logit"))
```

Here we include group-level effects for the year, the county, and the crime-type in the county in case the judicial system sentences the different crime-types differently relative to other counties. Each of the population-level regression coefficients are given a normal prior $\beta_j \sim N(0, 25).$ The group-level effects for the intercepts and effects for crime-type are given noncentral t-distributions $\gamma_k \sim t_{3; 0, 2.5}$ while the correlations between the county-level crime-type effects and county-level intercepts are given $\rho_{i.j} \sim lkj(1)$ priors. The hurdle parameter gets a $U(0,1)$ prior. The error term's variance also gets a noncentral t prior $\sigma \sim t_{3; 0, 2.5}.$

```         
student_t(3, 0, 2.5)
```

The quantity of interest is the regression coefficient for race.

```{r}
#| label: brms-hurdle-model-prior

library(brms)

bprior <- get_prior(JP_MIN_MON ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                     PRVREC + OGS * PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 + CRIME |COUNTY),
               data = df[s,],
               family = hurdle_lognormal(link = "identity", link_sigma = "log", link_hu = "logit"))

bprior$prior[1] <- "normal(0, 25)"
bprior
```

```{r}
#| label: brms-hurdle-model
#| results: hide

# library(future)
# plan(multicore, workers = 10)
fit_brm <- brm_multiple(JP_MIN_MON ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                     PRVREC + OGS * PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 + CRIME |COUNTY),
               data = imps,
               family = hurdle_lognormal(link = "identity", link_sigma = "log", link_hu = "logit"),
               prior = bprior,
               chains = 2, cores = 2, iter = 3500, refresh = 1500,
               # file = "brms_fit/brms-hurlde-si.fit",
               # file_refit = "on_change",
               save_model = "brms-hurdle-si.stan")
```

```{r}
#| label: brms-hurdle-model-summary
summary(fit_brm)

plot(fit_brm, ask = FALSE, N = 3)
```

From the hurdle model, we find that Black defendants do not receive different sentence lengths compared to White defendants (95% CI of (-0.11, 0.03)). In terms of 95% CIs we also find that there doesn't seem to be a difference in sentence lengths between male and female defendants either between or within each racial group.

```{r}
plot(conditional_effects(fit_brm, effects = "OFF_RACE:SEX"), ask = FALSE)
```

#### Lognormal GLM Hurdle Model with Predictors on Hurdle Parameter

Next, we modify the model from the previous section to include predictors in the logistic regression part of the hurdle model @eq-hurdle-intercept. The non-zero portion @eq-hurdle-glm of the hurdle model remains the same.

$$
\mathrm{logit}^{-1}(P(Y_i=0)) = \mathbf{x}_i \boldsymbol{\alpha}.
$$

The coefficients $\boldsymbol{\alpha}$ are given normal priors $\alpha_k \overset{iid}{\sim} N(0, 10).$ The priors for the other parameters remain the same.

The new model is specified with the `bf()` function.

```         
bf(JP_MIN_MON ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                     PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 + CRIME |COUNTY),
    hu ~ 1 + SEX * OFF_RACE + DOSAGE + DOSAGEQ + OGS + OGSQ + PRVREC + CRIME + TRIAL + (1 | COUNTY))
```

```{r}
inv_gamma_moments <- function(alpha, beta) {
    exp_1 <- beta / (alpha - 1)
    var_1 <- beta^2 / ((alpha - 1)^2 * (alpha - 2))
    return(list(mean = exp_1, var = var_1))
}

inv_gamma_moments(2.001, 1.001)
```

```{r}
bf1 <- bf(JP_MIN ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                    OGS * PRVREC + PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 |COUNTY),
          hu ~ SEX * OFF_RACE + RECMIN + OGS + OGSQ + PRVREC + CRIME + TRIAL + (1 | COUNTY))

bprior2 <- get_prior(bf1,
               data = df[s,],
               family = hurdle_poisson(link = "log", link_hu = "logit"))
bprior2$class
bprior2 <- prior(normal(0, 100), class = "b") +
    prior(normal(0, 100), class = "b", dpar = "hu") +
    # prior(lkj(1), class = "cor") +
    prior(student_t(3, 0, 2.5), class = "Intercept")
    prior(inv_gamma(2.001, 1.001), class = "sd", group = "COUNTY", lb = 0) +
    prior(inv_gamma(2.001, 1.001), class = "sd", group = "YEAR", lb = 0) +
    prior(logistic(0, 1), class = "Intercept", dpar = "hu") +
    prior(inv_gamma(2.001, 1.001), class = "sd", dpar = "hu", lb = 0)

# bprior2$prior[1] <- "normal(0, 25)"
bprior2
```

Next we fit the model.

```{r}
fit_brm2 <- brm(bf1,
               data = df[s,],
               family = hurdle_poisson(link = "log", link_hu = "logit"),
               prior = bprior2,
               chains = 2, cores = 8, iter = 3500, refresh = 100,
               init = 0,
               control = list(adapt_delta = 0.8, max_treedepth = 10),
               # file = "brms_fit/brms-hurlde-si.fit",
               # file_refit = "on_change",
               save_model = "brms-hurdle-si-2-pois.stan")
```

```{r}
#| label: brms-hurdle-model-summary-2
summary(fit_brm2)

# plot(fit_brm2, ask = FALSE, N = 3)
```

```{r}
plot(conditional_effects(fit_brm2, effects = "OFF_RACE:SEX"), ask = FALSE) 
```

```{r}
tidy(fit_brm) |>
    filter(term == "hu") |>
    pull(estimate) |>
    plogis()

tidy(fit_brm2) |>
    filter(term == "hu_(Intercept)") |>
    pull(estimate) |>
    plogis()

tidy(fit_brm) |>
    filter(term == "OFF_RACEBLACK") |>
    pull(estimate)

tidy(fit_brm2) |>
    filter(term == "OFF_RACEBLACK") |>
    pull(estimate)
```

```{r}
# conditional_effects(fit_brm2, ask = FALSE)
```

```{r}

# conditional_effects(fit_brm2, dpar = "hu", ask = FALSE)
```

```{r}
ppred1 <- posterior_predict(fit_brm)
pp_check(fit_brm, ndraws = 50) +
    coord_cartesian(xlim = c(0, 60)) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Intercept-only Hurdle",
         x = "Sentence Length (mon.)")

bayesplot::ppc_dens_overlay(y = log(fit_brm$data$JP_MIN_MON),
                            yrep = log(ppred1[1:50,])) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Intercept-only Hurdle",
         x = "log(Sentence Length (mon.))")
```

```{r}

ppred2 <- posterior_predict(fit_brm2)
pp_check(fit_brm2, ndraws = 50) +
    coord_cartesian(xlim = c(0, 60*30)) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Linear Predictor Hurdle",
         x = "Sentence Length (mon)")

bayesplot::ppc_dens_overlay(y = log1p(fit_brm2$data$JP_MIN),
                            yrep = log1p(ppred2[1:50,])) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Linear Predictor Hurdle",
         x = "log(Sentence Length (mon))")

bayesplot::ppc_error_scatter_avg_vs_x(y = log1p(fit_brm2$data$JP_MIN),
                            yrep = log1p(ppred2[1:50,]),
                            x = fit_brm2$data$DOSAGE) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Linear Predictor Hurdle",
         x = "log(Sentence Length (mon))")
```

```{r}
conditional_effects(fit_brm2,
                          effects = c("OFF_RACE:SEX"))

conditional_effects(fit_brm2,
                          effects = c("OFF_RACE:SEX"),
                          dpar = "hu")

```

```{r}
conditional_effects(fit_brm2,
                          effects = c("DOSAGE:OFF_RACE"))

conditional_effects(fit_brm2,
                          effects = c("DOSAGE:OFF_RACE"),
                          dpar = "hu")
```

```{r}
conditional_effects(fit_brm2,
                          effects = c("PRVREC:OFF_RACE"))

conditional_effects(fit_brm2,
                          effects = c("PRVREC:OFF_RACE"),
                          dpar = "hu")
```

#### Poisson Hurdle Model

```{r}
bf3 <- bf(JP_MIN ~ DOSAGE + DOSAGEQ + SEX*OFF_RACE + OGS + OGSQ +
                    OGS * PRVREC + PRVREC + RECMIN + CRIME + TRIAL +
                     (1 | YEAR) + (1 |COUNTY),
          hu ~ SEX * OFF_RACE + RECMIN + OGS + OGSQ + PRVREC + CRIME + TRIAL + (1 | COUNTY))

bprior3 <- get_prior(bf3,
               data = df[s,],
               family = hurdle_poisson(link = "log", link_hu = "logit"))
bprior3$class
bprior3 <- prior(normal(0, 100), class = "b") +
    prior(student_t(3, 0, 2.5), class = "Intercept")
    prior(inv_gamma(2.001, 1.001), class = "sd", group = "COUNTY", lb = 0) +
    prior(inv_gamma(2.001, 1.001), class = "sd", group = "YEAR", lb = 0) +
    prior(logistic(0, 1), class = "Intercept", dpar = "hu") +
    prior(normal(0, 100), class = "b", dpar = "hu") +
    prior(inv_gamma(2.001, 1.001), class = "sd", dpar = "hu", lb = 0)

# bprior2$prior[1] <- "normal(0, 25)"
bprior3
```

```{r}
fit_brm3 <- brm(bf3,
               data = df[s,],
               family = hurdle_poisson(link = "log", link_hu = "logit"),
               prior = bprior3,
               init = "0",
               chains = 2, cores = 2, iter = 2000, refresh = 100,
               # file = "brms_fit/brms-hurlde-si.fit",
               # file_refit = "on_change",
               control = list(max_treedepth = 10, adapt_delta = 0.8),
               save_model = "brms-hurdle-si-pois.stan")
```

```{r}
summary(fit_brm3)
```

```{r}
plot(fit_brm3, ask = FALSE, N = 3)
```

```{r}
ppred3 <- posterior_predict(fit_brm3)
pp_check(fit_brm3, ndraws = 50) +
    coord_cartesian(xlim = c(0, 60)) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Poisson Hurdle",
         x = "Sentence Length (mon.)")

bayesplot::ppc_dens_overlay(y = log1p(fit_brm3$data$JP_MIN),
                            yrep = log1p(ppred3[1:50,])) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Poisson Hurdle",
         x = "log(Sentence Length (mon.))")

bayesplot::ppc_error_scatter_avg_vs_x(y = log1p(fit_brm3$data$JP_MIN),
                            yrep = log1p(ppred3[1:50,]),
                         x = fit_brm3$data$DOSAGE) + 
    labs(title = "Posterior predictive checks",
                  subtitle = "Poisson Hurdle",
         y = "log(Sentence Length (mon.))")
```

## Sensitivity Analysis

Evaluating the impacts of various nonignorable missingness mechanisms can be accomplished with pattern-mixture models. The values of the incomplete numeric data can be scaled or shifted
